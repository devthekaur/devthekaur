<?php
/**
 * Theme functions and definitions
 *
 * @package HelloElementor
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_VERSION', '3.0.0' );

if ( ! isset( $content_width ) ) {
	$content_width = 800; // Pixels.
}

if ( ! function_exists( 'hello_elementor_setup' ) ) {
	/**
	 * Set up theme support.
	 *
	 * @return void
	 */
	function hello_elementor_setup() {
		if ( is_admin() ) {
			hello_maybe_update_theme_version_in_db();
		}

		if ( apply_filters( 'hello_elementor_register_menus', true ) ) {
			register_nav_menus( [ 'menu-1' => esc_html__( 'Header', 'hello-elementor' ) ] );
			register_nav_menus( [ 'menu-2' => esc_html__( 'Footer', 'hello-elementor' ) ] );
		}

		if ( apply_filters( 'hello_elementor_post_type_support', true ) ) {
			add_post_type_support( 'page', 'excerpt' );
		}

		if ( apply_filters( 'hello_elementor_add_theme_support', true ) ) {
			add_theme_support( 'post-thumbnails' );
			add_theme_support( 'automatic-feed-links' );
			add_theme_support( 'title-tag' );
			add_theme_support(
				'html5',
				[
					'search-form',
					'comment-form',
					'comment-list',
					'gallery',
					'caption',
					'script',
					'style',
				]
			);
			add_theme_support(
				'custom-logo',
				[
					'height'      => 100,
					'width'       => 350,
					'flex-height' => true,
					'flex-width'  => true,
				]
			);

			/*
			 * Editor Style.
			 */
			add_editor_style( 'classic-editor.css' );

			/*
			 * Gutenberg wide images.
			 */
			add_theme_support( 'align-wide' );

			/*
			 * WooCommerce.
			 */
			if ( apply_filters( 'hello_elementor_add_woocommerce_support', true ) ) {
				// WooCommerce in general.
				add_theme_support( 'woocommerce' );
				// Enabling WooCommerce product gallery features (are off by default since WC 3.0.0).
				// zoom.
				add_theme_support( 'wc-product-gallery-zoom' );
				// lightbox.
				add_theme_support( 'wc-product-gallery-lightbox' );
				// swipe.
				add_theme_support( 'wc-product-gallery-slider' );
			}
		}
	}
}
add_action( 'after_setup_theme', 'hello_elementor_setup' );

function hello_maybe_update_theme_version_in_db() {
	$theme_version_option_name = 'hello_theme_version';
	// The theme version saved in the database.
	$hello_theme_db_version = get_option( $theme_version_option_name );

	// If the 'hello_theme_version' option does not exist in the DB, or the version needs to be updated, do the update.
	if ( ! $hello_theme_db_version || version_compare( $hello_theme_db_version, HELLO_ELEMENTOR_VERSION, '<' ) ) {
		update_option( $theme_version_option_name, HELLO_ELEMENTOR_VERSION );
	}
}

if ( ! function_exists( 'hello_elementor_display_header_footer' ) ) {
	/**
	 * Check whether to display header footer.
	 *
	 * @return bool
	 */
	function hello_elementor_display_header_footer() {
		$hello_elementor_header_footer = true;

		return apply_filters( 'hello_elementor_header_footer', $hello_elementor_header_footer );
	}
}

if ( ! function_exists( 'hello_elementor_scripts_styles' ) ) {
	/**
	 * Theme Scripts & Styles.
	 *
	 * @return void
	 */
	function hello_elementor_scripts_styles() {
		$min_suffix = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? '' : '.min';

		if ( apply_filters( 'hello_elementor_enqueue_style', true ) ) {
			wp_enqueue_style(
				'hello-elementor',
				get_template_directory_uri() . '/style' . $min_suffix . '.css',
				[],
				HELLO_ELEMENTOR_VERSION
			);
		}

		if ( apply_filters( 'hello_elementor_enqueue_theme_style', true ) ) {
			wp_enqueue_style(
				'hello-elementor-theme-style',
				get_template_directory_uri() . '/theme' . $min_suffix . '.css',
				[],
				HELLO_ELEMENTOR_VERSION
			);
		}

		if ( hello_elementor_display_header_footer() ) {
			wp_enqueue_style(
				'hello-elementor-header-footer',
				get_template_directory_uri() . '/header-footer' . $min_suffix . '.css',
				[],
				HELLO_ELEMENTOR_VERSION
			);
		}
	}
}
add_action( 'wp_enqueue_scripts', 'hello_elementor_scripts_styles' );

if ( ! function_exists( 'hello_elementor_register_elementor_locations' ) ) {
	/**
	 * Register Elementor Locations.
	 *
	 * @param ElementorPro\Modules\ThemeBuilder\Classes\Locations_Manager $elementor_theme_manager theme manager.
	 *
	 * @return void
	 */
	function hello_elementor_register_elementor_locations( $elementor_theme_manager ) {
		if ( apply_filters( 'hello_elementor_register_elementor_locations', true ) ) {
			$elementor_theme_manager->register_all_core_location();
		}
	}
}
add_action( 'elementor/theme/register_locations', 'hello_elementor_register_elementor_locations' );

if ( ! function_exists( 'hello_elementor_content_width' ) ) {
	/**
	 * Set default content width.
	 *
	 * @return void
	 */
	function hello_elementor_content_width() {
		$GLOBALS['content_width'] = apply_filters( 'hello_elementor_content_width', 800 );
	}
}
add_action( 'after_setup_theme', 'hello_elementor_content_width', 0 );

if ( ! function_exists( 'hello_elementor_add_description_meta_tag' ) ) {
	/**
	 * Add description meta tag with excerpt text.
	 *
	 * @return void
	 */
	function hello_elementor_add_description_meta_tag() {
		if ( ! apply_filters( 'hello_elementor_description_meta_tag', true ) ) {
			return;
		}

		if ( ! is_singular() ) {
			return;
		}

		$post = get_queried_object();
		if ( empty( $post->post_excerpt ) ) {
			return;
		}

		echo '<meta name="description" content="' . esc_attr( wp_strip_all_tags( $post->post_excerpt ) ) . '">' . "\n";
	}
}
add_action( 'wp_head', 'hello_elementor_add_description_meta_tag' );

// Admin notice
if ( is_admin() ) {
	require get_template_directory() . '/includes/admin-functions.php';
}

// Settings page
require get_template_directory() . '/includes/settings-functions.php';

// Header & footer styling option, inside Elementor
require get_template_directory() . '/includes/elementor-functions.php';

if ( ! function_exists( 'hello_elementor_customizer' ) ) {
	// Customizer controls
	function hello_elementor_customizer() {
		if ( ! is_customize_preview() ) {
			return;
		}

		if ( ! hello_elementor_display_header_footer() ) {
			return;
		}

		require get_template_directory() . '/includes/customizer-functions.php';
	}
}
add_action( 'init', 'hello_elementor_customizer' );

if ( ! function_exists( 'hello_elementor_check_hide_title' ) ) {
	/**
	 * Check whether to display the page title.
	 *
	 * @param bool $val default value.
	 *
	 * @return bool
	 */
	function hello_elementor_check_hide_title( $val ) {
		if ( defined( 'ELEMENTOR_VERSION' ) ) {
			$current_doc = Elementor\Plugin::instance()->documents->get( get_the_ID() );
			if ( $current_doc && 'yes' === $current_doc->get_settings( 'hide_title' ) ) {
				$val = false;
			}
		}
		return $val;
	}
}
add_filter( 'hello_elementor_page_title', 'hello_elementor_check_hide_title' );

/**
 * BC:
 * In v2.7.0 the theme removed the `hello_elementor_body_open()` from `header.php` replacing it with `wp_body_open()`.
 * The following code prevents fatal errors in child themes that still use this function.
 */
if ( ! function_exists( 'hello_elementor_body_open' ) ) {
	function hello_elementor_body_open() {
		wp_body_open();
	}
}
function product_video_shortcode() {
    ob_start(); 

    // Get the video URL from the ACF custom field
    $video_url = get_field('product_video_url');

    if ($video_url) {
     
		echo '	<div class="product-video">
		<video width="100%" height="auto"  autoplay loop muted >
			<source src="' . esc_url($video_url) . '" type="video/mp4">
			Your browser does not support the video tag.
		</video>
	</div>';
	
    }

    return ob_get_clean(); 
}
add_shortcode('product_video', 'product_video_shortcode');

// Enqueue script
function enqueue_custom_scripts() {
    wp_enqueue_script('jquery');
}
add_action('wp_enqueue_scripts', 'enqueue_custom_scripts');

// Add custom input field to product page
function add_custom_input_field_to_product() {
    global $product;

    // Get the product ID
    $product_id = $product->get_id();

    // Get the saved custom input value
    $custom_input_value = get_post_meta($product_id, 'custom_input', true);

    // Output HTML for the custom input field
    echo '<div class="custom-input-field">';
    echo '<label for="custom_input">Custom Input:</label>';
    echo '<input type="text" id="custom_input" class="custom-input" name="custom_input" value="' . esc_attr($custom_input_value) . '">';
    echo '</div>';

    // Output JavaScript to update the displayed price based on the custom input
    ?>
    <script type="text/javascript">
        jQuery(function ($) {
            // Trigger the function on input change
            $('#custom_input').on('input', function () {
                // Get the current product price
                var currentPrice = <?php echo json_encode($product->get_price()); ?>;

                // Get the custom input value
                var customInputValue = $(this).val();

                // Assuming Rs10 should be added to the total amount for each product
                var additionalPrice = 10;

                // Calculate the new price based on the custom input
                var newPrice = parseFloat(currentPrice) + parseFloat(additionalPrice);

                // Update the displayed price
                $('.single-product .price .woocommerce-Price-amount').html('<span class="woocommerce-Price-currencySymbol">&#8377;</span>' + newPrice.toFixed(2));
            });
        });
    </script>
    <?php
}

add_action('woocommerce_before_single_product', 'add_custom_input_field_to_product');

// Save custom input field value to cart item data
function save_custom_input_field_value_to_cart($cart_item_data, $product_id) {
    if (isset($_POST['custom_input'])) {
        $cart_item_data['custom_input'] = sanitize_text_field($_POST['custom_input']);
    }
    return $cart_item_data;
}

add_filter('woocommerce_add_cart_item_data', 'save_custom_input_field_value_to_cart', 10, 2);

// Update cart item price based on custom input field value
function update_cart_item_price($cart_item, $cart_item_key) {
    $additional_price = 10; // Assuming Rs10 should be added to the total amount for each product quantity

    if (isset($cart_item['custom_input'])) {
        $cart_item['data']->set_price($cart_item['data']->get_price() + $additional_price);
    }

    return $cart_item;
}

add_filter('woocommerce_cart_item_price', 'update_cart_item_price', 10, 2);

// Update cart subtotal based on custom input field value
function update_cart_subtotal($cart) {
    $additional_price = 10; // Assuming Rs10 should be added to the cart subtotal for each product quantity

    if (is_admin() && !defined('DOING_AJAX')) {
        return;
    }

    // Initialize additional subtotal
    $additional_subtotal = 0;

    // Calculate the additional price for each product in the cart
    foreach ($cart->get_cart() as $cart_item_key => $cart_item) {
        if (isset($cart_item['custom_input'])) {
            $additional_subtotal += $additional_price * $cart_item['quantity'];
        }
    }

    // Update the cart subtotal
    $cart->subtotal = $cart->cart_contents_total + $additional_subtotal;
    $cart->subtotal_ex_tax = $cart->subtotal;

    // Update cart total
    $cart->total = $cart->subtotal + $cart->shipping_total + $cart->tax_total;
}

add_action('woocommerce_calculate_totals', 'update_cart_subtotal', 10, 1);
function add_extra_fee() {
    global $woocommerce;

    // Set your extra fee amount
    $custom_input = 10;

    // Add the extra fee to the cart
    $woocommerce->cart->add_fee( 'Custom Input', $custom_input, true, 'standard' );
}

add_action( 'woocommerce_cart_calculate_fees', 'add_extra_fee' );
